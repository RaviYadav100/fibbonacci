The task is to complete the insertsort() function which is used to implement Insertion Sort.

Examples:

Input: arr[] = [4, 1, 3, 9, 7]
Output: [1, 3, 4, 7, 9]
Explanation: The sorted array will be [1, 3, 4, 7, 9].
Input: arr[] = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Explanation: The sorted array will be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].
Input: arr[] = [4, 1, 9]
Output: [1, 4, 9]
Explanation: The sorted array will be [1, 4, 9].
Constraints:
1 <= arr.size() <= 1000
1 <= arr[i] <= 1000

--------------------------------------------//soution//---------------------------------------------

class Solution {
  public:
    void insertionSort(vector<int>& arr) {
   
        int n=arr.size();
        
        for(int i=0;i<n;i++){
            
            for(int j=i;j>0&&arr[j-1]>arr[j];j--){
                int temp=arr[j-1];
                arr[j-1]=arr[j];
                arr[j]=temp;
            }
        }
    }
};


---------------------------------------------------//coding ninjas//------------------------------------------------

Problem statement
You are given ‘N’ integers in the form of an array ‘ARR’. Print the sorted array using the insertion sort.

Note :
No need to return anything. You should sort the array in-place.
For example :
Let ‘ARR’ be: [1, 4, 2]
The sorted array will be: [1, 2, 4].
Detailed explanation ( Input/output format, Notes, Images )
Constraints :
1 <= T <= 10
1 <= N <= 5*10^3
1 <= ARR[i] <= 10^5

Time Limit: 1 sec
Sample Input 1 :
2
4
3 1 2 2
3
1 4 2
Sample Output 1 :
1 2 2 3
1 2 4
Explanation For Sample Output 1 :
For test case 1: 
The sorted array will be: [1, 2, 2, 3].

For test case 2: 
The sorted array will be: [1, 2, 4].
Sample Input 2 :
2
4
4 12 11 20
6
6 5 4 3 2 1
Sample Output 2 :
4 11 12 20
1 2 3 4 5 6

----------------------------------------------------------//solution//--------------------------------------------------------
#include <bits/stdc++.h> 
void insertionSort(int n, vector<int> &arr){
    for(int i=0;i<arr.size();i++){
        for(int j=i;j>0&&arr[j-1]>arr[j];j--){
            swap(arr[j-1],arr[j]);
        }
    }
}
