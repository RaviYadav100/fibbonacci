-------------------------------------------------------------------//gfg//-----------------------------------------------------------------------------

Implement Quick Sort, a Divide and Conquer algorithm, to sort an array, arr[] in ascending order. Given an array, arr[], with starting index low and ending index high, complete the functions partition() and quickSort(). Use the last element as the pivot so that all elements less than or equal to the pivot come before it, and elements greater than the pivot follow it.

Note: The low and high are inclusive.

Examples:

Input: arr[] = [4, 1, 3, 9, 7]
Output: [1, 3, 4, 7, 9]
Explanation: After sorting, all elements are arranged in ascending order.
Input: arr[] = [2, 1, 6, 10, 4, 1, 3, 9, 7]
Output: [1, 1, 2, 3, 4, 6, 7, 9, 10]
Explanation: Duplicate elements (1) are retained in sorted order.
Input: arr[] = [5, 5, 5, 5]
Output: [5, 5, 5, 5]
Explanation: All elements are identical, so the array remains unchanged.
Constraints:
1 <= arr.size() <= 105
1 <= arr[i] <= 105

-------------------------------------------------------------//solution//------------------------------------------------------------------------------------


class Solution {
  public:
    // Function to sort an array using quick sort algorithm.
    void quickSort(vector<int>& arr, int low, int high) {
       if(low<high){
           int pindex=partition(arr,low,high);
           quickSort(arr,low,pindex-1);
           quickSort(arr,pindex+1,high);
       }
        
    }

  public:
    // Function that takes last element as pivot, places the pivot element at
    // its correct position in sorted array, and places all smaller elements
    // to left of pivot and all greater elements to right of pivot.
    int partition(vector<int>& arr, int low, int high) {
        
        int pivot=arr[low];
        int i=low;
        int j=high;
        while(i<j){
            while(arr[i]<=pivot&& i<=high-1){
                i++;
            }
            while(arr[j]>pivot&& j>=low+1){
                j--;
            }
            if(i<j) swap(arr[i],arr[j]);
        }
        swap(arr[low],arr[j]);
        return j;
    }
};


-------------------------------------------------------------//coding Ninjas//------------------------------------------------------------------------------------

You are given an array of integers. You need to sort the array in ascending order using quick sort.

Quick sort is a divide and conquer algorithm in which we choose a pivot point and partition the array into two parts i.e, left and right. The left part contains the numbers smaller than the pivot element and the right part contains the numbers larger than the pivot element. Then we recursively sort the left and right parts of the array.

Example:

Let the array = [ 4, 2, 1, 5, 3 ]
Let pivot to be the rightmost number.

After the 1st level partitioning the array will be { 2, 1, 3, 4, 5 } as 3 was the pivot. After 2nd level partitioning the array will be { 1, 2, 3, 4, 5 } as 1 was the pivot for the left part and 5 was the pivot for the right part. Now our array is sorted and there is no need to divide it again.

Detailed explanation ( Input/output format, Notes, Images )
Constraints:
1 <= T <= 10
1 <= N <= 10 ^ 3
-10 ^ 9 <= ARR[i] <= 10 ^ 9

Where 'T' is the number of test cases, 'N' is the length of the array 'ARR', and 'ARR[i]' is the array element at index i.

Time limit: 1 sec.
Sample Input 1:
2
5
4 2 5 1 3
4     
6 2 4 1
Sample Output 1:
1 2 3 4 5
1 2 4 6
Explanation of Input 1:
Test case 1:
Given array =  [4, 2, 5, 1, 3]
Sorted array = [1, 2, 3, 4, 5]

Test case 2:
Given array =  [6, 2, 4, 1]
Sorted array = [1, 2, 4, 6]
Sample Input 2:
2
5 
5 3 2 6 4
4
1 2 3 4
Sample Output 2:
2 3 4 5 6
1 2 3 4

---------------------------------------------------------------------//solution//--------------------------------------------------------------------

#include <bits/stdc++.h>
 
int partition(vector<int> &arr,int low,int high){
    int pivot=arr[low];
    int i=low;
    int j=high;
    while(i<j){
        while(arr[i]<=pivot&& i<=high-1){
            i++;
        }
        while(arr[j]>pivot&& j>=low+1){
            j--;
        }
        if(i<j) swap(arr[i],arr[j]);
    }
    swap(arr[low],arr[j]);
    return j;
}
void qs(vector<int> &arr,int low,int high){
    if(low<high){
        int pindex=partition(arr,low,high);
        qs(arr,low,pindex-1);
        qs(arr,pindex+1,high);
    }
}
vector<int> quickSort(vector<int> arr)
{
   qs(arr,0,arr.size()-1);
        return arr;
}
